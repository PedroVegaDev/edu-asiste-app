-- Create Table for roles
CREATE TABLE roles (
  id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, -- PostgreSQL equivalent for auto-incrementing primary key
  role TEXT
);

-- Create Table for work_areas
CREATE TABLE work_areas (
  id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, -- PostgreSQL equivalent for auto-incrementing primary key
  area TEXT
);

-- Create Table for user_details
CREATE TABLE user_details (
  id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, -- PostgreSQL equivalent for auto-incrementing primary key
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  phone TEXT,
  id_work_area INT, -- Foreign key to work_areas table
  FOREIGN KEY (id_work_area) REFERENCES work_areas(id)
);

-- Create Table for users
CREATE TABLE users (
  id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, -- PostgreSQL equivalent for auto-incrementing primary key
  dni TEXT,
  password TEXT,
  id_user_detail INT, -- Foreign key to user_details table
  id_role INT,        -- Foreign key to roles table
  FOREIGN KEY (id_user_detail) REFERENCES user_details(id),
  FOREIGN KEY (id_role) REFERENCES roles(id)
);

-- Create Table for schedules
CREATE TABLE schedules (
  id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, -- PostgreSQL equivalent for auto-incrementing primary key
  id_user INT,        -- Foreign key to users table
  day_of_week TEXT,
  start_time TIME,    -- Using native TIME type for better handling
  end_time TIME,      -- Using native TIME type for better handling
  FOREIGN KEY (id_user) REFERENCES users(id)
);

-- Create Table for attendances
CREATE TABLE attendances (
  id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, -- PostgreSQL equivalent for auto-incrementing primary key
  id_user INT,        -- Foreign key to users table
  date DATE,          -- Using native DATE type for better handling
  time TIME,          -- Using native TIME type for better handling
  status TEXT,        -- "on time" or "late"
  type TEXT,          -- "entry" or "exit"
  FOREIGN KEY (id_user) REFERENCES users(id)
);

-- Insert data into the roles table
INSERT INTO roles (id, role) VALUES
(1, 'admin'),
(2, 'user');

-- Insert data into the work_areas table
INSERT INTO work_areas (id, area) VALUES
(1, 'IT'),
(2, 'HR'),
(3, 'Finanzas');

-- Insert data into the user_details table
INSERT INTO user_details (id, first_name, last_name, email, phone, id_work_area) VALUES
(1, 'Juan', 'Pérez', 'juan.perez@example.com', '123456789', 1),
(2, 'Ana', 'López', 'ana.lopez@example.com', '987654321', 2),
(3, 'Luis', 'Martínez', 'luis.martinez@example.com', '456789123', 3);

-- Insert data into the users table
INSERT INTO users (id, dni, password, id_user_detail, id_role) VALUES
(1, '73150987', '123456', 1, 1),
(2, '11112222', 'test123', 2, 2),
(3, '12345678', 'password789', 3, 2);

-- Insert data into the schedules table
INSERT INTO schedules (id, id_user, day_of_week, start_time, end_time) VALUES
(1, 3, 'Lunes', '09:00', '17:00'),
(2, 2, 'Martes', '08:00', '16:00'),
(3, 3, 'Miércoles', '10:00', '18:00');

-- Insert data into the attendances table
-- Note: Date format changed from 'DD/MM/YYYY' to 'YYYY-MM-DD' for PostgreSQL DATE type
INSERT INTO attendances (id, id_user, date, time, status, type) VALUES
(1, 2, '2024-09-12', '09:00', 'on time', 'entry'),
(2, 2, '2024-09-12', '17:00', 'on time', 'exit'),
(3, 3, '2024-09-12', '08:15', 'late', 'entry');

-- Drop View for view_login if it exists
DROP VIEW IF EXISTS view_login;

-- View for login
CREATE VIEW
  view_login AS
SELECT
  users.id,
  users.dni,
  users.password,
  user_details.first_name,
  user_details.last_name,
  roles.role
FROM
  users
  INNER JOIN roles ON users.id_role = roles.id
  INNER JOIN user_details ON users.id_user_detail = user_details.id;

-- Drop View for view_attendance_list if it exists
DROP VIEW IF EXISTS view_attendance_list;

-- View for attendance list
CREATE VIEW
  view_attendance_list AS
SELECT
  attendances.id,
  user_details.first_name,
  user_details.last_name,
  attendances.date, -- Using the native DATE column
  attendances.time, -- Using the native TIME column
  users.dni,
  user_details.email
FROM
  attendances
  INNER JOIN users ON attendances.id_user = users.id
  INNER JOIN user_details ON users.id_user_detail = user_details.id;
